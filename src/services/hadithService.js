// Service pour les hadiths Sahih al-Bukhari
// Utilise un syst√®me de chargement √† la demande par chapitre pour optimiser les performances

// Cache pour les donn√©es
let chaptersIndex = null
const hadithCache = new Map()
const chapterCache = new Map()

// Charger l'index des chapitres
async function loadChaptersIndex() {
  if (chaptersIndex) {
    return chaptersIndex
  }
  
  try {
    console.log('üìö Chargement de l\'index des chapitres Sahih al-Bukhari...')
    const response = await fetch('/hadiths/index.json')
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    chaptersIndex = await response.json()
    console.log('‚úÖ Index des chapitres charg√©:', chaptersIndex.length, 'chapitres disponibles')
    return chaptersIndex
  } catch (error) {
    console.error('‚ùå Erreur lors du chargement de l\'index des chapitres:', error)
    throw error
  }
}

// R√©cup√©rer tous les chapitres avec le nombre r√©el de hadiths
export async function getAllChapters() {
  const cacheKey = 'all_chapters'
  
  if (chapterCache.has(cacheKey)) {
    return chapterCache.get(cacheKey)
  }
  
  try {
    const index = await loadChaptersIndex()
    
    // Transformer l'index en format de chapitres avec m√©tadonn√©es
    const chapters = index.map(chapter => ({
      id: chapter.id,
      title: getChapterTitle(chapter.id),
      arabicTitle: getChapterArabicTitle(chapter.id),
      hadithCount: chapter.hadithCount,
      filename: chapter.filename
    }))
    
    console.log(`üìñ ${chapters.length} chapitres disponibles`)
    
    chapterCache.set(cacheKey, chapters)
    return chapters
  } catch (error) {
    console.error('Erreur lors du chargement des chapitres:', error)
    // Retourner des donn√©es de fallback
    return getFallbackChapters()
  }
}

// R√©cup√©rer un chapitre sp√©cifique
export async function getChapter(chapterId) {
  const chapters = await getAllChapters()
  return chapters.find(chapter => chapter.id === chapterId)
}

// R√©cup√©rer les hadiths d'un chapitre (chargement √† la demande)
export async function getChapterHadiths(chapterId) {
  const cacheKey = `chapter_${chapterId}`
  
  if (hadithCache.has(cacheKey)) {
    console.log(`üìñ Hadiths du chapitre ${chapterId} r√©cup√©r√©s du cache`)
    return hadithCache.get(cacheKey)
  }
  
  try {
    console.log(`üîç Chargement des hadiths du chapitre ${chapterId}...`)
    
    // Charger le fichier sp√©cifique du chapitre
    const response = await fetch(`/hadiths/chapter_${chapterId}.json`)
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const chapterHadiths = await response.json()
    
    // Trier par ID dans le livre
    chapterHadiths.sort((a, b) => (a.idInBook || a.id) - (b.idInBook || b.id))
    
    console.log(`‚úÖ ${chapterHadiths.length} hadiths charg√©s pour le chapitre ${chapterId}`)
    
    hadithCache.set(cacheKey, chapterHadiths)
    return chapterHadiths
  } catch (error) {
    console.error(`Erreur lors du chargement des hadiths du chapitre ${chapterId}:`, error)
    throw error
  }
}

// Rechercher dans les hadiths (recherche dans l'index puis chargement √† la demande)
export async function searchHadiths(query) {
  if (!query || query.trim().length < 2) {
    return []
  }
  
  try {
    console.log(`üîç Recherche: "${query}"`)
    const searchTerm = query.toLowerCase()
    const results = []
    
    // Obtenir la liste des chapitres
    const chapters = await getAllChapters()
    
    // Rechercher dans les chapitres qui correspondent au terme de recherche
    for (const chapter of chapters.slice(0, 10)) { // Limiter √† 10 chapitres pour la performance
      try {
        const hadiths = await getChapterHadiths(chapter.id)
        
        hadiths.forEach(hadith => {
          const arabicMatch = hadith.arabic && hadith.arabic.includes(query)
          const englishMatch = hadith.english && hadith.english.text && 
                              hadith.english.text.toLowerCase().includes(searchTerm)
          const narratorMatch = hadith.english && hadith.english.narrator && 
                               hadith.english.narrator.toLowerCase().includes(searchTerm)
          
          if (arabicMatch || englishMatch || narratorMatch) {
            results.push({
              ...hadith,
              chapter: {
                id: chapter.id,
                title: chapter.title,
                arabicTitle: chapter.arabicTitle
              }
            })
          }
        })
        
        // Limiter les r√©sultats pour √©viter une surcharge
        if (results.length >= 50) break
      } catch (error) {
        console.warn(`Erreur lors de la recherche dans le chapitre ${chapter.id}:`, error)
      }
    }
    
    console.log(`üìã ${results.length} r√©sultats trouv√©s pour "${query}"`)
    return results
  } catch (error) {
    console.error('Erreur lors de la recherche:', error)
    return []
  }
}

// R√©cup√©rer un hadith sp√©cifique
export async function getHadith(hadithId, chapterId) {
  try {
    if (chapterId) {
      const hadiths = await getChapterHadiths(chapterId)
      const hadith = hadiths.find(h => h.id === hadithId)
      if (hadith) return hadith
    }
    
    // Si pas trouv√©, chercher dans tous les chapitres (moins efficace)
    const chapters = await getAllChapters()
    for (const chapter of chapters) {
      try {
        const hadiths = await getChapterHadiths(chapter.id)
        const hadith = hadiths.find(h => h.id === hadithId)
        if (hadith) return hadith
      } catch (error) {
        continue
      }
    }
    
    throw new Error('Hadith non trouv√©')
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du hadith:', error)
    throw error
  }
}

// R√©cup√©rer des hadiths al√©atoires
export async function getRandomHadiths(count = 5) {
  try {
    const chapters = await getAllChapters()
    const results = []
    
    // S√©lectionner des chapitres al√©atoires
    const randomChapters = chapters.sort(() => 0.5 - Math.random()).slice(0, Math.min(5, chapters.length))
    
    for (const chapter of randomChapters) {
      try {
        const hadiths = await getChapterHadiths(chapter.id)
        if (hadiths.length > 0) {
          const randomHadith = hadiths[Math.floor(Math.random() * hadiths.length)]
          results.push({
            ...randomHadith,
            chapter: {
              id: chapter.id,
              title: chapter.title,
              arabicTitle: chapter.arabicTitle
            }
          })
        }
        
        if (results.length >= count) break
      } catch (error) {
        continue
      }
    }
    
    return results.slice(0, count)
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des hadiths al√©atoires:', error)
    return []
  }
}

// Statistiques
export async function getStatistics() {
  try {
    const chapters = await getAllChapters()
    const totalHadiths = chapters.reduce((sum, chapter) => sum + chapter.hadithCount, 0)
    
    return {
      totalChapters: chapters.length,
      totalHadiths: totalHadiths,
      availableChapters: chapters.length
    }
  } catch (error) {
    console.error('Erreur lors du calcul des statistiques:', error)
    return {
      totalChapters: 0,
      totalHadiths: 0,
      availableChapters: 0
    }
  }
}

// Pr√©charger les chapitres les plus importants
export async function preloadImportantChapters() {
  const importantChapters = [1, 2, 3, 8, 23] // R√©v√©lation, Foi, Connaissance, Pri√®re, Je√ªne
  
  try {
    console.log('üöÄ Pr√©chargement des chapitres importants...')
    const promises = importantChapters.map(chapterId => 
      getChapterHadiths(chapterId).catch(error => {
        console.warn(`√âchec du pr√©chargement du chapitre ${chapterId}:`, error)
        return null
      })
    )
    
    await Promise.all(promises)
    console.log('‚úÖ Chapitres importants pr√©charg√©s')
    return true
  } catch (error) {
    console.error('‚ùå Erreur lors du pr√©chargement:', error)
    return false
  }
}

// Fonctions utilitaires pour les titres des chapitres
function getChapterTitle(chapterId) {
  const titles = {
    1: "R√©v√©lation",
    2: "Foi", 
    3: "Connaissance",
    4: "Ablutions",
    5: "Bain rituel",
    6: "Menstruation",
    7: "Tayammum",
    8: "Pri√®re",
    9: "Heures de pri√®re",
    10: "Appel √† la pri√®re",
    11: "Pri√®re du vendredi",
    12: "Pri√®re de la peur",
    13: "Pri√®res des deux f√™tes",
    14: "Pri√®re impaire",
    15: "Pri√®re de demande de pluie",
    16: "√âclipse",
    17: "Prosternation",
    18: "Raccourcissement de la pri√®re",
    19: "Pri√®re de nuit",
    20: "Actions pendant la pri√®re",
    21: "Fun√©railles",
    22: "Zakat",
    23: "Je√ªne",
    24: "Pri√®re de nuit pendant le Ramadan",
    25: "Retraite spirituelle",
    26: "P√®lerinage",
    27: "Omra",
    28: "P√®lerinage interdit",
    29: "P√©nalit√©s de chasse",
    30: "Vertus de M√©dine",
    31: "Exp√©ditions",
    32: "Cinqui√®me du butin",
    33: "Tributs",
    34: "Ventes",
    35: "Salaam",
    36: "Pr√™ts",
    37: "Litiges",
    38: "Objets trouv√©s",
    39: "Irrigation",
    40: "Pr√™ts",
    41: "Repr√©sentation",
    42: "Partenariat",
    43: "Hypoth√®que",
    44: "Affranchissement",
    45: "Cadeaux",
    46: "T√©moignage",
    47: "R√©conciliation",
    48: "Conditions",
    49: "Testaments",
    50: "Combats",
    51: "R√©volution",
    52: "Sang-argent",
    53: "Loi du talion",
    54: "Contrainte",
    55: "Ruses",
    56: "Interpr√©tation des r√™ves",
    57: "Conditions",
    58: "Serments et v≈ìux",
    59: "Expiation des serments",
    60: "H√©ritage",
    61: "Limites l√©gales",
    62: "Crimes",
    63: "Apostasie",
    64: "Contrainte",
    65: "Messagers",
    66: "Vertus du Coran",
    67: "Mariage",
    68: "Divorce",
    69: "Soutien",
    70: "Nourriture",
    71: "Sacrifice",
    72: "Boissons",
    73: "Patients",
    74: "M√©decine",
    75: "V√™tements",
    76: "Bonnes mani√®res",
    77: "Demande de permission",
    78: "Invocations",
    79: "Repentir",
    80: "Riqaq",
    81: "Unit√©",
    82: "Troubles",
    83: "Jugements",
    84: "Souhaits",
    85: "Sang-argent",
    86: "Loi du talion",
    87: "Interpr√©tation",
    88: "Troubles",
    89: "Jugements",
    90: "Souhaits",
    91: "Accepter les informations",
    92: "S'en tenir au Livre et √† la Sunna",
    93: "Unit√©",
    94: "Troubles",
    95: "Jugements",
    96: "Souhaits",
    97: "Unit√©"
  }
  
  return titles[chapterId] || `Chapitre ${chapterId}`
}

function getChapterArabicTitle(chapterId) {
  const arabicTitles = {
    1: "ÿ®ÿØÿ° ÿßŸÑŸàÿ≠Ÿä",
    2: "ÿßŸÑÿ•ŸäŸÖÿßŸÜ",
    3: "ÿßŸÑÿπŸÑŸÖ", 
    4: "ÿßŸÑŸàÿ∂Ÿàÿ°",
    5: "ÿßŸÑÿ∫ÿ≥ŸÑ",
    6: "ÿßŸÑÿ≠Ÿäÿ∂",
    7: "ÿßŸÑÿ™ŸäŸÖŸÖ",
    8: "ÿßŸÑÿµŸÑÿßÿ©",
    9: "ŸÖŸàÿßŸÇŸäÿ™ ÿßŸÑÿµŸÑÿßÿ©",
    10: "ÿßŸÑÿ£ÿ∞ÿßŸÜ",
    11: "ÿßŸÑÿ¨ŸÖÿπÿ©",
    12: "ÿµŸÑÿßÿ© ÿßŸÑÿÆŸàŸÅ",
    13: "ÿßŸÑÿπŸäÿØŸäŸÜ",
    14: "ÿßŸÑŸàÿ™ÿ±",
    15: "ÿßŸÑÿßÿ≥ÿ™ÿ≥ŸÇÿßÿ°",
    16: "ÿßŸÑŸÉÿ≥ŸàŸÅ",
    17: "ÿßŸÑÿ≥ÿ¨ŸàÿØ",
    18: "ÿ™ŸÇÿµŸäÿ± ÿßŸÑÿµŸÑÿßÿ©",
    19: "ÿßŸÑÿ™Ÿáÿ¨ÿØ",
    20: "ÿßŸÑÿπŸÖŸÑ ŸÅŸä ÿßŸÑÿµŸÑÿßÿ©",
    21: "ÿßŸÑÿ¨ŸÜÿßÿ¶ÿ≤",
    22: "ÿßŸÑÿ≤ŸÉÿßÿ©",
    23: "ÿßŸÑÿµŸàŸÖ",
    24: "ŸÇŸäÿßŸÖ ÿ±ŸÖÿ∂ÿßŸÜ",
    25: "ÿßŸÑÿßÿπÿ™ŸÉÿßŸÅ",
    26: "ÿßŸÑÿ≠ÿ¨",
    27: "ÿßŸÑÿπŸÖÿ±ÿ©",
    28: "ÿßŸÑŸÖÿ≠ÿµÿ±",
    29: "ÿ¨ÿ≤ÿßÿ° ÿßŸÑÿµŸäÿØ",
    30: "ŸÅÿ∂ÿßÿ¶ŸÑ ÿßŸÑŸÖÿØŸäŸÜÿ©",
    31: "ÿßŸÑÿ¨ŸáÿßÿØ",
    32: "ÿßŸÑÿÆŸÖÿ≥",
    33: "ÿßŸÑÿ¨ÿ≤Ÿäÿ©",
    34: "ÿßŸÑÿ®ŸäŸàÿπ",
    35: "ÿßŸÑÿ≥ŸÑŸÖ",
    36: "ÿßŸÑÿ•ÿ¨ÿßÿ±ÿ©",
    37: "ÿßŸÑÿÆÿµŸàŸÖÿßÿ™",
    38: "ÿßŸÑŸÑŸÇÿ∑ÿ©",
    39: "ÿßŸÑŸÖÿ≥ÿßŸÇÿßÿ©",
    40: "ÿßŸÑÿßÿ≥ÿ™ŸÇÿ±ÿßÿ∂",
    41: "ÿßŸÑŸàŸÉÿßŸÑÿ©",
    42: "ÿßŸÑÿ¥ÿ±ŸÉÿ©",
    43: "ÿßŸÑÿ±ŸáŸÜ",
    44: "ÿßŸÑÿπÿ™ŸÇ",
    45: "ÿßŸÑŸáÿ®ÿ©",
    46: "ÿßŸÑÿ¥ŸáÿßÿØÿßÿ™",
    47: "ÿßŸÑÿµŸÑÿ≠",
    48: "ÿßŸÑÿ¥ÿ±Ÿàÿ∑",
    49: "ÿßŸÑŸàÿµÿßŸäÿß",
    50: "ÿßŸÑÿ¨ŸáÿßÿØ",
    51: "ÿßŸÑÿÆŸÖÿ≥",
    52: "ÿßŸÑÿØŸäÿßÿ™",
    53: "ÿßŸÑŸÇÿ≥ÿßŸÖÿ©",
    54: "ÿßŸÑŸÖÿ≠ÿßÿ±ÿ®ŸäŸÜ",
    55: "ÿßŸÑÿ≠ŸäŸÑ",
    56: "ÿßŸÑÿ™ÿπÿ®Ÿäÿ±",
    57: "ÿßŸÑÿßÿπÿ™ÿµÿßŸÖ",
    58: "ÿßŸÑÿ£ŸäŸÖÿßŸÜ",
    59: "ŸÉŸÅÿßÿ±ÿ© ÿßŸÑÿ£ŸäŸÖÿßŸÜ",
    60: "ÿßŸÑŸÅÿ±ÿßÿ¶ÿ∂",
    61: "ÿßŸÑÿ≠ÿØŸàÿØ",
    62: "ÿßŸÑÿ¨ŸÜÿßŸäÿßÿ™",
    63: "ÿ£ÿÆÿ®ÿßÿ± ÿßŸÑÿ¢ÿ≠ÿßÿØ",
    64: "ÿßŸÑŸÖÿ∫ÿßÿ≤Ÿä",
    65: "ÿßŸÑÿ™ŸÅÿ≥Ÿäÿ±",
    66: "ŸÅÿ∂ÿßÿ¶ŸÑ ÿßŸÑŸÇÿ±ÿ¢ŸÜ",
    67: "ÿßŸÑŸÜŸÉÿßÿ≠",
    68: "ÿßŸÑÿ∑ŸÑÿßŸÇ",
    69: "ÿßŸÑŸÜŸÅŸÇÿßÿ™",
    70: "ÿßŸÑÿ£ÿ∑ÿπŸÖÿ©",
    71: "ÿßŸÑÿπŸÇŸäŸÇÿ©",
    72: "ÿßŸÑÿ£ÿ¥ÿ±ÿ®ÿ©",
    73: "ÿßŸÑŸÖÿ±ÿ∂Ÿâ",
    74: "ÿßŸÑÿ∑ÿ®",
    75: "ÿßŸÑŸÑÿ®ÿßÿ≥",
    76: "ÿßŸÑÿ£ÿØÿ®",
    77: "ÿßŸÑÿßÿ≥ÿ™ÿ¶ÿ∞ÿßŸÜ",
    78: "ÿßŸÑÿØÿπŸàÿßÿ™",
    79: "ÿßŸÑÿ™Ÿàÿ®ÿ©",
    80: "ÿßŸÑÿ±ŸÇÿßŸÇ",
    81: "ÿßŸÑŸÇÿØÿ±",
    82: "ÿßŸÑŸÅÿ™ŸÜ",
    83: "ÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
    84: "ÿßŸÑÿ™ŸÖŸÜŸä",
    85: "ÿ£ÿÆÿ®ÿßÿ± ÿßŸÑÿ¢ÿ≠ÿßÿØ",
    86: "ÿßŸÑÿßÿπÿ™ÿµÿßŸÖ",
    87: "ÿßŸÑÿ™Ÿàÿ≠ŸäÿØ",
    88: "ÿßŸÑŸÅÿ™ŸÜ",
    89: "ÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
    90: "ÿßŸÑÿ™ŸÖŸÜŸä",
    91: "ÿ£ÿÆÿ®ÿßÿ± ÿßŸÑÿ¢ÿ≠ÿßÿØ",
    92: "ÿßŸÑÿßÿπÿ™ÿµÿßŸÖ",
    93: "ÿßŸÑÿ™Ÿàÿ≠ŸäÿØ",
    94: "ÿßŸÑŸÅÿ™ŸÜ",
    95: "ÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
    96: "ÿßŸÑÿ™ŸÖŸÜŸä",
    97: "ÿßŸÑÿ™Ÿàÿ≠ŸäÿØ"
  }
  
  return arabicTitles[chapterId] || `ÿßŸÑÿ®ÿßÿ® ${chapterId}`
}

// Donn√©es de fallback en cas d'erreur
function getFallbackChapters() {
  return [
    { id: 1, title: "R√©v√©lation", arabicTitle: "ÿ®ÿØÿ° ÿßŸÑŸàÿ≠Ÿä", hadithCount: 7 },
    { id: 2, title: "Foi", arabicTitle: "ÿßŸÑÿ•ŸäŸÖÿßŸÜ", hadithCount: 53 },
    { id: 3, title: "Connaissance", arabicTitle: "ÿßŸÑÿπŸÑŸÖ", hadithCount: 76 },
    { id: 4, title: "Ablutions", arabicTitle: "ÿßŸÑŸàÿ∂Ÿàÿ°", hadithCount: 113 },
    { id: 5, title: "Bain rituel", arabicTitle: "ÿßŸÑÿ∫ÿ≥ŸÑ", hadithCount: 31 },
    { id: 6, title: "Menstruation", arabicTitle: "ÿßŸÑÿ≠Ÿäÿ∂", hadithCount: 33 },
    { id: 7, title: "Tayammum", arabicTitle: "ÿßŸÑÿ™ŸäŸÖŸÖ", hadithCount: 23 },
    { id: 8, title: "Pri√®re", arabicTitle: "ÿßŸÑÿµŸÑÿßÿ©", hadithCount: 172 },
    { id: 9, title: "Heures de pri√®re", arabicTitle: "ŸÖŸàÿßŸÇŸäÿ™ ÿßŸÑÿµŸÑÿßÿ©", hadithCount: 38 },
    { id: 10, title: "Appel √† la pri√®re", arabicTitle: "ÿßŸÑÿ£ÿ∞ÿßŸÜ", hadithCount: 166 }
  ]
}

